/* groovylint-disable LineLength */
CRED = '\033[1;31m'
CGREEN = '\033[1;32m'
CYELLOW = '\033[1;33m'
CBLUE = '\033[1;34m'
CMAGENTA = '\033[1;35m'
CCYAN = '\033[1;36m'
CWHITE = '\033[1;37m'
CFRAMED = '\033[51m'
CNOTFRAMED = '\033[54m'
CUNDERLINED = '\033[4m'
CNOTUNDERLINED = '\033[24m'
CNORMAL = '\033[0m'
// https://en.wikipedia.org/wiki/ANSI_escape_code

STABLE_BRANCH_NAME='stable'
OLD_LATEST_FS_VERSION_NAME='latest'
FABRIC_TOOLS_NAME = 'fabric-tools'
FABRIC_TOOLS_EXTENDED_NAME = 'fabric-tools-extended'

DBG_STDOUTPUT = '2>&1 1>/dev/null'
BE_VERBOSE = true

SSH_USER='test'
SSH_MACHINE='172.18.0.3'
DOLLAR_SIGN='$'
//if (DEBUG == 'true') {BE_VERBOSE = true}
//if (BE_VERBOSE) { DBG_STDOUTPUT = '' }

reportList = ["\n${CRED}======== MAIN OPERATIONS OF THE PIPELINE ========${CNORMAL}\n"]

node {
        ansiColor('xterm') {
            wrappedStage('Fabric-Starter-snapshot test',,'START THE JOB') {
            def newFabricStarterTag

            wrappedStage('Prune-docker-in-test-container', CRED, "Pruning all docker stuff in test container") {
                def script= """
                                SANDBOX_DIR='/home/test/sandbox'
                                docker stop `docker ps -qa`
                                docker rm `docker ps -qa`
                                docker rmi -f `docker images -qa`
                                docker volume rm \$(docker volume ls -q) || true 
                                rm -rf "\${SANDBOX_DIR}"
                                mkdir -p "\${SANDBOX_DIR}"
                                docker image ls
                            """
                def output=runSSH(SSH_USER,SSH_MACHINE,TEST_CONTAINER_CREDENTIALS,script)
                echo "Output: ${output}"
            }

            wrappedStage('Unpack-and-load-artifcacts', CGREEN, "Unpacking fabric-starter and loading built archived docker images") {
                    def script = """
                        SANDBOX_DIR='/home/test/sandbox'
                        jobDir='/home/test/Fabric-Starter-Snapshot-Build-NL'
                        jobNo='344'
                        ARCHIVE_DIR="\${jobDir}/\${jobNo}"
                        tar xzf "\${ARCHIVE_DIR}/fabric-starter.tgz" --directory "\${SANDBOX_DIR}"
                        ls -la "\${SANDBOX_DIR}"
                        find "\${ARCHIVE_DIR}" -type f -name '*.tar' -exec sh -c "cat {} | docker load" \\;
                        docker image ls
                    """
                    def output=runSSH(SSH_USER,SSH_MACHINE,TEST_CONTAINER_CREDENTIALS,script)
                    echo "Output: ${output}"
                }

wrappedStage('Test-stable-branch', CGREEN, "Testig stable branch") {
                    def script = """
                        export TERM='dumb'
                        mkdir -p /home/test/tmp
                        export TEMPDIR='/home/test/tmp'
                        BRANCH='1.4.4-stable'
                        SANDBOX_DIR='/home/test/sandbox'    
                        TEST_DIR="\${SANDBOX_DIR}/fabric-starter/test"
                        cd "\${TEST_DIR}"
                        git checkout "\${BRANCH}"
                        pwd
                        source \${TEST_DIR}/local-test-env.sh example.com
                        scenarios/01-fabric-starter-acceptance-test/create-test-network.sh org1 org2
                        scenarios/01-fabric-starter-acceptance-test/run-scenario.sh cli org1 org2
                        scenarios/02-basic-functionality-test/run-scenario.sh cli org1 org2
                        scenarios/02-basic-functionality-test/run-scenario.sh api org1 org2
                    """
                    def output=runSSH(SSH_USER,SSH_MACHINE,TEST_CONTAINER_CREDENTIALS,script)
                    echo "Output: ${output}"
                }   


            //? ======================================================= REPORT =====================================
            wrappedStage('Print-report',CGREEN, 'print report') {
                if (BE_VERBOSE) {
                    def report
                    reportList.eachWithIndex {
                        if (it != null) {
                            line = it.replaceFirst('^', "${CCYAN}")
                            line = line.replaceFirst(': ', ":${CGREEN} ")
                            line = line.replaceFirst('STAGE:', "${CRED}-- STAGE:${CBLUE}")
                            line = line.replaceFirst('$', "${CNORMAL}")
                            report += line + '\n'
                        }
                    }
                    echo report
                }
            }

        } // wrappedStage 'Fabric-Starter-snapshot'
    } //AnsiColor
}//node

//!========================================== FUNCTIONS =================================================

def wrappedStage(name, def color=CNORMAL, def description=null, def currentDir=".", Closure closure) {
        stage(name) {
            dir(currentDir) {
                if (description) { echo "${CRED}${CUNDERLINED}${description}${CNOTUNDERLINED}" }

                echo color
                reportList.add("STAGE: ${STAGE_NAME}")
                def result = closure.call()
                echo CNORMAL
                return result
            }
        }
}

def runShell(String command){
    def responseCode = sh returnStatus: true, script: "${command} &> tmp.txt"
    def output =  readFile(file: "tmp.txt")

    if (responseCode != 0){
        println "[ERROR] ${output}"
        throw new Exception("${output}")
    }else{
        return "${output}"
    }
}

def runSSH(user, machine, credentials, script){  //Please, keep last ENDSSH on first position, no comments after
    sshagent(credentials: [credentials]) {
                        def result= sh (returnStdout:true, script: """
                        ssh "${user}@${machine}" bash -s << 'ENDSSH'
                                $script
ENDSSH
                                """ 
                            ) 
                        //def output =  readFile(file: "tmp.txt")
                        //echo ${output}
                        return result
    }
}
