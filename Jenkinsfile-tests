/* groovylint-disable LineLength */
CRED = '\033[1;31m'
CGREEN = '\033[1;32m'
CYELLOW = '\033[1;33m'
CBLUE = '\033[1;34m'
CMAGENTA = '\033[1;35m'
CCYAN = '\033[1;36m'
CWHITE = '\033[1;37m'
CFRAMED = '\033[51m'
CNOTFRAMED = '\033[54m'
CUNDERLINED = '\033[4m'
CNOTUNDERLINED = '\033[24m'
CNORMAL = '\033[0m'
// https://en.wikipedia.org/wiki/ANSI_escape_code

STABLE_BRANCH_NAME='stable'
OLD_LATEST_FS_VERSION_NAME='latest'
FABRIC_TOOLS_NAME = 'fabric-tools'
FABRIC_TOOLS_EXTENDED_NAME = 'fabric-tools-extended'

DBG_STDOUTPUT = '2>&1 1>/dev/null'
BE_VERBOSE = true

SSH_USER='test'
SSH_MACHINE='172.18.0.3'
DOLLAR_SIGN='$'
//if (DEBUG == 'true') {BE_VERBOSE = true}
//if (BE_VERBOSE) { DBG_STDOUTPUT = '' }

reportList = ["\n${CRED}======== MAIN OPERATIONS OF THE PIPELINE ========${CNORMAL}\n"]



node {
        ansiColor('xterm') {
            wrappedStage('Fabric-Starter-snapshot test',,'START THE JOB') {
            def newFabricStarterTag

            wrappedStage('Delete-previous-results', CBLUE, "Pruning all docker stuff") {

            // def test = sh returnStdout:true, script: """
            //         #!/bin/bash -l
            //         uname -a
            //         ls -la
            //         """
            // echo "${test}"
            // test="${test}".tokenize("\n").last()
            // echo "${test}"


                
                sshagent(credentials: ['${TEST_CONTAINER_CREDENTIALS}']) {
                //def tester=''

                sh """
                    ssh "${SSH_USER}@${SSH_MACHINE}" bash -t -t -t -s << 'ENDSSH'
                    id
                    export TTT=1234
                    env
                    echo \"\${TTT} is the value!"
                    ls -la ./test.sh
                    cat ./test.sh
                    sh -c ./test.sh > /home/test/a.txt 
                    cat /home/test/a.txt
ENDSSH'
                
                    echo "\${#sshoutput[*]}" > /tmp/result1
                    cat /tmp/result
                    """
                




//                 sh returnStdout:true, script: """
//                     ssh "\${SSH_USER}@\${SSH_MACHINE}" "bash -t -t -s" << 'ENDSSH'
//                     SANDBOX_DIR='/home/test/sandbox'
//                     docker stop `docker ps -qa`
//                     docker rm `docker ps -qa`
//                     docker rmi -f `docker images -qa`
//                     docker volume rm \$(docker volume ls -q)
//                     rm -rf "\${SANDBOX_DIR}"
//                     mkdir -p "\${SANDBOX_DIR}"
//                     docker image ls
// ENDSSH
//                     """
                



                    //tester="${tester}".tokenize("\n").last()
//                    echo "This is the return result: +++++ ${tester} +++++"
                    //".tokenize().last()"
                

                
                    // echo "\${#sshoutput[*]}" > /tmp/result1
                    // cat /tmp/result
            
                //def myscript="id\nuname -a\nls -la"    
                // def myscript = '''#!/usr/bin/env bash -t -t
                // SANDBOX_DIR='/home/test/sandbox'
                // docker stop `docker ps -qa`
                // docker rm `docker ps -qa`
                // docker rmi -f `docker images -qa`
                // docker volume rm $(docker volume ls -q)
                // rm -rf "\${SANDBOX_DIR}"
                // mkdir -p "\${SANDBOX_DIR}"
                // docker image ls
                // '''

                // //sh returnStdout:true, script: "ssh -C ${SSH_USER}@${SSH_MACHINE}  ${myscript}"
                // echo ">>>> The output is ${result} <<<<"
                }

            }






//? ======================================================= REPORT =====================================
            wrappedStage('Print-report',CGREEN, 'print report') {
                if (BE_VERBOSE) {
                    def report
                    reportList.eachWithIndex {
                        if (it != null) {
                            line = it.replaceFirst('^', "${CCYAN}")
                            line = line.replaceFirst(': ', ":${CGREEN} ")
                            line = line.replaceFirst('STAGE:', "${CRED}-- STAGE:${CBLUE}")
                            line = line.replaceFirst('$', "${CNORMAL}")
                            report += line + '\n'
                        }
                    }
                    echo report
                }
            }

        } // wrappedStage 'Fabric-Starter-snapshot'
    } //AnsiColor
}//node

//!========================================== FUNCTIONS =================================================

def wrappedStage(name, def color=CNORMAL, def description=null, def currentDir=".", Closure closure) {
        stage(name) {
            dir(currentDir) {
                if (description) { echo "${CRED}${CUNDERLINED}${description}${CNOTUNDERLINED}" }

                echo color
                reportList.add("STAGE: ${STAGE_NAME}")
                def result = closure.call()
                echo CNORMAL
                return result
            }
        }
    }


def runShell(String command){
    def responseCode = sh returnStatus: true, script: "${command} &> tmp.txt"
    def output =  readFile(file: "tmp.txt")

    if (responseCode != 0){
        println "[ERROR] ${output}"
        throw new Exception("${output}")
    }else{
        return "${output}"
    }
}