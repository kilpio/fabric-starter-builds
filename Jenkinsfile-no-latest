/* groovylint-disable LineLength */
CRED = '\033[1;31m'
CGREEN = '\033[1;32m'
CYELLOW = '\033[1;33m'
CBLUE = '\033[1;34m'
CMAGENTA = '\033[1;35m'
CCYAN = '\033[1;36m'
CWHITE = '\033[1;37m'
CFRAMED = '\033[51m'
CNOTFRAMED = '\033[54m'
CUNDERLINED = '\033[4m'
CNOTUNDERLINED = '\033[24m'
CNORMAL = '\033[0m'
// https://en.wikipedia.org/wiki/ANSI_escape_code

//import groovy.transform.Field
//@Field List reportList = []
reportList = ["\n${CRED}======== MAIN OPERATIONS OF THE PIPELINE ========${CNORMAL}\n"]

node {

    //? Delete images from previous build
    echo "Runnning build ${BUILD_NUMBER} of ${JOB_NAME}"
    int previousJobNo = BUILD_NUMBER as Integer
    previousJobNo-= 1
    previousBuildNumber = previousJobNo.toString()
    echo CRED
    echo "Pruning results of build no. ${previousBuildNumber} of ${JOB_NAME}"
    sh "docker image prune --all --force --filter \"label=jenkins_job_name=${JOB_NAME}\" --filter \"label=jenkins_job_build=${previousBuildNumber}\""
    echo CNORMAL

    //? Cleaning workspace
    def isWorkspaceNotOK = !(WORKSPACE?.trim())
        if (isWorkspaceNotOK) {
        echo 'Failure: WORKSPACE variable is undefined!'
        currentBuild.result = 'FAILURE'
        return
        } else {
        echo "Cleaning workspace: ${WORKSPACE}"
        dir(WORKSPACE) {
            deleteDir()
            sh 'ls -ld $(find .)'
        }
        }
    //LATEST_FABRIC_VERSION = '1.4.9'
    //LATEST_FABRIC_STARTER_VERSION = 'latest'

    //? ======================================== BUILDING FABRIC-TOOLS-EXTENDED IMAGES =========================
    stage('Fabric-Starter-snapshot') {
        reportList.add("STAGE: Fabric-Starter-snapshot")
        ansiColor('xterm') {
            def newFabricStarterTag
            echo CRED
            stage('Fabric-Starter-git-checkout-pull-master') {
                echo 'Pull fabric-starter master and evaluate next snapshot'
                echo CBLUE
                checkoutFromGithubToSubfolder('fabric-starter', "${BUILD_BRANCH}")
                dir('fabric-starter') {
                    // sh "git checkout ${MASTER_BRANCH}"
                    // sh "git pull"
                    newFabricStarterTag = evaluateNextSnapshotGitTag('Fabric-starter')
                }
                echo CNORMAL
            }

            echo CRED
            stage ('Fabric-Starter-Merge-master-to-stable') {//BUILD_NUMBER
            reportList.add("STAGE: Fabric-Starter-Merge-master-to-stable")
                echo 'Merge current branch and update tags from LATEST_FABRIC_VERSION to stable'
                echo 'Modify .env files according to new tag, modify current yamls -> stable'
                echo 'Commit modifications'
                echo ' '
                echo CMAGENTA
                echo "Master Branch is: ${MASTER_BRANCH}"
                dir('fabric-starter') {
                    sh "git config user.email ${GIT_REPO_OWNER}@jenkins"
                    sh "git config user.name  ${GIT_REPO_OWNER}"
                    // LATEST_FABRIC_VERSION will be replaced with FABRIC_VERSION
                    updateAndCommitBranch(MASTER_BRANCH, LATEST_FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}")
                }
                echo 'Finish Fabric-Starter-Merge-master-to-stable'
                echo CNORMAL
            }

            echo CRED
            stage ('Fabric-Starter-Merge-stable-to-snapshot') {
                reportList.add("STAGE: Fabric-Starter-Merge-stable-to-snapshot")
                if (BUILD_BRANCH == 'stable') {
                echo 'Merge current branch and update tags from LATEST_FABRIC_VERSION to stable'
                echo 'Modify .env files according to new tag, modify current yamls -> current snapshot'
                echo 'Commit modifications'
                //sh "git config --global --list"
                sh 'git config --list'
                echo '______________________________________________________'
                echo CCYAN
                dir('fabric-starter') {
                    updateAndCommitBranch(BUILD_BRANCH, BUILD_BRANCH, newFabricStarterTag)
                }
                } else {reportList.add("Fabric-Starter-Merge-stable-to-snapshot: Skip creating snapshot for ${BUILD_BRANCH}")}
                echo CNORMAL
            }

            echo CRED
            stage('Fabric-Tools-Extended-build-extended-images') {
                reportList.add("STAGE: Fabric-Tools-Extended-build-extended-images")
                echo 'Build fabric-tools-extended images for LATEST_FABRIC_VERSION, stable and snapshot'
                echo CYELLOW
                dir('fabric-starter') {
                    //buildDockerImage('fabric-tools-extended', newFabricStarterTag, newFabricStarterTag, "--no-cache --build-arg FABRIC_VERSION=${FABRIC_VERSION} -f fabric-tools-extended/Dockerfile .")
                    //buildDockerImage('fabric-tools-extended', 'stable', 'stable', "--no-cache --build-arg FABRIC_VERSION=${FABRIC_VERSION} -f fabric-tools-extended/Dockerfile .")
                def fabricToolExtendedName = 'fabric-tools-extended'    
                    buildDockerImage(
                                        fabricToolExtendedName,
                                        FABRIC_VERSION,
                                        MASTER_BRANCH,
                                        "--no-cache --build-arg FABRIC_VERSION=${FABRIC_VERSION} -f fabric-tools-extended/Dockerfile ."
                                    )

                    tagDockerImage(fabricToolExtendedName, FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}")    // e.g. stable
                    if (BUILD_BRANCH == 'stable') {tagDockerImage(fabricToolExtendedName, FABRIC_VERSION, newFabricStarterTag)} //e.g. snapshot
                    //tagDockerImage(fabricToolExtendedName, FABRIC_VERSION,"${FABRIC_VERSION}-latest")
                    }
                    
                echo CNORMAL
            }
            //? ======================================== BUILDING FABRIC-STARTER-REST IMAGES =========================
            echo CRED
            stage('Farbric-starter-REST-checkout') {
                reportList.add("STAGE: Farbric-starter-REST-checkout")
                echo 'Pull fabric-starter-rest and checkout to the master branch'
                echo CCYAN
                checkoutFromGithubToSubfolder('fabric-starter-rest')
                // dir('fabric-starter-rest') {ite-master-to-stable') {
                echo CBLUE
                    dir('fabric-starter-rest') {
                        sh "git config user.email ${GIT_REPO_OWNER}@jenkins"
                        sh "git config user.name  ${GIT_REPO_OWNER}"
                        updateAndCommitRESTBranch(MASTER_BRANCH, LATEST_FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    }
                echo CNORMAL
            }

            echo CRED
            echo 'Take updates from master (pretend as from stable) to snapshot, commit snapshot (create snapshot branch if does not exist)'
            stage('Farbric-starter-REST-copy-stable-to-snapshot') {
                if (BUILD_BRANCH == 'stable') {
                reportList.add("STAGE: Farbric-starter-REST-copy-stable-to-snapshot")
                echo CYELLOW
                dir('fabric-starter-rest') {
                        updateAndCommitRESTBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", "${FABRIC_VERSION}-${BUILD_BRANCH}", newFabricStarterTag)
                }
                } else {reportList.add("Farbric-starter-REST-copy-stable-to-snapshot: Skip creating snapshot for ${BUILD_BRANCH}")}
                echo CNORMAL
            }

            echo CRED
            stage('Fabic-Starter-REST-build-docker-images') {
                if (SKIP_FS_REST_BUILD == 'false'){ 
                reportList.add("STAGE: Fabic-Starter-REST-build-docker-images")
                echo 'Build snapshot, stable and LATEST_FABRIC_VERSION fabric-starter-rest images'
                echo CGREEN

                dir('fabric-starter-rest') {
                    buildDockerImage(
                                        'fabric-starter-rest',
                                        FABRIC_VERSION,
                                        MASTER_BRANCH,
                                        "--build-arg FABRIC_STARTER_REPOSITORY=${FABRIC_STARTER_REPOSITORY} --no-cache -f Dockerfile ."
                                    )
                    if (BUILD_BRANCH == 'stable') {
                    tagDockerImage('fabric-starter-rest',FABRIC_VERSION,newFabricStarterTag)}
                    tagDockerImage('fabric-starter-rest',FABRIC_VERSION,"${FABRIC_VERSION}-${BUILD_BRANCH}")
                    //tagDockerImage('fabric-starter-rest',FABRIC_VERSION,"${FABRIC_VERSION}-latest")

                    //buildDockerImage('fabric-starter-rest', newFabricStarterTag, newFabricStarterTag, "--build-arg FABRIC_STARTER_REPOSITORY=${FABRIC_STARTER_REPOSITORY}  --no-cache -f Dockerfile .")
                    //buildDockerImage('fabric-starter-rest', 'stable', 'stable', "--build-arg FABRIC_STARTER_REPOSITORY=${FABRIC_STARTER_REPOSITORY}  --no-cache -f Dockerfile .")

                }}
                echo CNORMAL
                }

//? ========================================== DOCKER PUSH==============================================

            echo CRED
            stage('Fabic-Starter-REST-push-docker-images') {
                reportList.add("STAGE: Fabic-Starter-REST-push-docker-images")
                echo CBLUE
                echo SKIP_DOCKER_PUSH

            if (SKIP_DOCKER_PUSH =='false') {
                    if (BUILD_BRANCH == 'stable') {pushDockerImage('fabric-starter-rest', newFabricStarterTag)}
                    pushDockerImage('fabric-starter-rest', "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    //pushDockerImage('fabric-starter-rest', FABRIC_VERSION)
                    //pushDockerImage('fabric-starter-rest', "${FABRIC_VERSION}-latest")
                }
                echo CNORMAL
            }

            echo CRED
            stage('Fabic-Starter-push-docker-images') {
                reportList.add("STAGE: Fabic-Starter-push-docker-images")
                echo CCYAN
                echo SKIP_FS_REST_BUILD
                if ((SKIP_DOCKER_PUSH == 'false') || (SKIP_FS_REST_BUILD =='false') ) {
                    if (BUILD_BRANCH == 'stable') {pushDockerImage('fabric-tools-extended', newFabricStarterTag)}
                    pushDockerImage('fabric-tools-extended', "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    //pushDockerImage('fabric-tools-extended', "${FABRIC_VERSION}-latest")
                }
                echo CNORMAL
            }

            //? ==================================== GIT PUSH==========================================
            echo CRED
            stage('Fabic-Starter-REST-git-push-snapshot') {
                reportList.add("STAGE: Fabic-Starter-REST-git-push-snapshot")
                echo CBLUE
                if (BUILD_BRANCH == 'stable') {
                dir('fabric-starter-rest') {
                        gitPushToBranch(newFabricStarterTag, 'fabric-starter-rest')
                }
                }
                echo CNORMAL
            }

            echo CRED
            stage('Fabic-Starter-REST-git-push-stable') {
                
                reportList.add("STAGE: Fabic-Starter-REST-git-push-stable")
                echo CGREEN
                dir('fabric-starter-rest') {
                    gitPushToBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", 'fabric-starter-rest')
                }
                echo CNORMAL
            }

            echo CRED
            stage ('Fabic-Starter-git-push-snapshot') {
                reportList.add("STAGE: Fabic-Starter-git-push-snapshot")
                echo CMAGENTA
                if (BUILD_BRANCH == 'stable') {
                dir('fabric-starter') {
                    gitPushToBranch(newFabricStarterTag, 'fabric-starter')
                }
                }
                echo CNORMAL
            }

            echo CRED
            stage ('Fabic-Starter-git-push-stable') {
                reportList.add("STAGE: Fabic-Starter-git-push-stable")
                echo CBLUE
                dir('fabric-starter') {
                    gitPushToBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", 'fabric-starter')
                }
                echo CNORMAL
            }
            //? ====================================== REPORT =====================================
            stage('printReport') {
                reportList.add("STAGE: printReport")
                echo CGREEN
                def report
                
                reportList.eachWithIndex {
                    if (it!=null){
                    line = it.replaceFirst('^',"${CCYAN}")
                    line = line.replaceFirst(': ',":${CGREEN} ")
                    line = line.replaceFirst('STAGE:',"${CRED}-- STAGE:${CBLUE}")
                    line = line.replaceFirst('$',"${CNORMAL}")
                    report += line +"\n"
                    }
                }
                echo report
                echo CNORMAL
            }
        } //AnsiColor
    } //Fabric-Starter-Packages-snapshot
}//node

//! ======================================== FUNCTIONS ===========================================

def checkoutFromGithubToSubfolder(repositoryName, def branch = 'master') {
    echo 'If login fails here with right credentials, please add github.com to known hosts for jenkins user (ssh-keyscan -H github.com >> .ssh/known_hosts)'
    sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
            sh 'pwd'
            sh 'ls -la'
            sh "git clone git@github.com:${GIT_REPO_OWNER}/${repositoryName}.git"
            dir(repositoryName) {
                    sh "git checkout ${MASTER_BRANCH}"
                    sh 'git pull'
            }
            reportList.add("checkoutFromGithubToSubfolder: git clone git@github.com:${GIT_REPO_OWNER}/${repositoryName}.git; git checkout ${MASTER_BRANCH}; git pull")
    }
}

//Temporaly rename this function as evaluateNextSnapshotGitTag to generate snapshot in new format '1.4.4-snapshot-0.12'
def evaluateNextSnapshotGitTagTransition(repositoryTitle) {
    echo "Evaluate next snapshot name for ${repositoryTitle}"
    def lastSnapshot = sh(returnStdout: true, script: "git branch -r --list 'origin/snapshot-*' --sort=-committerdate | sort --version-sort --reverse | head -1").trim()
    echo "Current latest snapshot: ${lastSnapshot}"
    def (branchPrefix, fabricVersion, version) = lastSnapshot.tokenize('-')
    def (majorVer, minorVer) = fabricVersion.tokenize('.')
    int minorVersion = (minorVer as int)
    def cleanBranchPrefix=branchPrefix.split('/')[1]
    def newGitTag = "${FABRIC_VERSION}-${cleanBranchPrefix}-${majorVer}.${minorVersion + 1}"
    echo "New Tag for ${repositoryTitle}: ${newGitTag}"
    reportList.add("evaluateNextSnapshotGitTag: New Tag for ${repositoryTitle}: ${newGitTag}")
    newGitTag
    }


    def evaluateNextSnapshotGitTag(repositoryTitle) {
    echo "Evaluate next snapshot name for ${repositoryTitle}"
    def lastSnapshot = sh(returnStdout: true, script: "git branch -r --list 'origin/*-snapshot-*' --sort=-committerdate | sort --version-sort --reverse | head -1").trim()
    echo "Current latest snapshot: ${lastSnapshot}"
    def (fabricVersion, branchPrefix, version) = lastSnapshot.tokenize('-')
    def cleanFabricVersion=fabricVersion.split('/')[1]
    def (majorVer, minorVer) = version.tokenize('.')
    int minorVersion = (minorVer as int)
    def newGitTag = "${FABRIC_VERSION}-${branchPrefix}-${majorVer}.${minorVersion + 1}"
    echo "New Tag for ${repositoryTitle}: ${newGitTag}"
    reportList.add("evaluateNextSnapshotGitTag: New Tag for ${repositoryTitle}: ${newGitTag}")
    newGitTag
    }


void buildDockerImage(imageName, tag, branchToBuildImageFrom, def args = '') {
    CUNDERLINED = '\033[4m'
    CNOTUNDERLINED = '\033[24m'
    CRED = '\033[1;31m'

    echo CUNDERLINED
    echo "Building ${imageName} with tag ${tag} from branch ${branchToBuildImageFrom}"
    sh 'id'
    sh 'docker image ls'
    echo CNOTUNDERLINED

    sh "git checkout ${branchToBuildImageFrom}"
    if (!args?.trim()) {
        args = '-f Dockerfile .'
    }

    arguments = "-t ${DOCKER_REPO}/${imageName}:${tag} --label \"jenkins_job_build=${BUILD_NUMBER}\" --label \"jenkins_job_name=${JOB_NAME}\" ${args}"
    echo "docker build args: $arguments"

    sh "docker image build ${arguments}"
    reportList.add("buildDockerImage: docker image build ${arguments}")
    echo CUNDERLINED
    sh 'docker image ls'
    echo CRED
    //echo imageName
    //echo tag
    //echo branchToBuildImageFrom

    echo CNOTUNDERLINED
}

void tagDockerImage(imageName, tag, newTag) {
    sh "docker tag ${DOCKER_REPO}/${imageName}:${tag} ${DOCKER_REPO}/${imageName}:${newTag}"
    reportList.add("tagDockerImage: docker tag ${DOCKER_REPO}/${imageName}:${tag} ${DOCKER_REPO}/${imageName}:${newTag}")
}

void pushDockerImage(imageName, tag) {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '${DOCKER_CREDENTIALS_ID}',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        sh "docker logout"
        sh "docker login -u $USERNAME -p $PASSWORD ${DOCKER_REGISTRY}"
        sh "docker push ${USERNAME}/${imageName}:${tag}"
        sh "docker logout"
        reportList.add("pushDockerImage: docker push ${USERNAME}/${imageName}:${tag}")
    }
}

void commitBranch(branchName) {
   echo "void commitBranch ${branchName}"
   sh "git checkout ${branchName}"
    sh "git commit -m ${branchName} || true"
    reportList.add("commitBranch: git commit -m ${branchName}")

}

void gitPushToBranch(branchName, repoName) {
    echo GITHUB_SSH_CREDENTIALS_ID
    sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
        sh "git config user.name ${GIT_REPO_OWNER}"
        sh "git remote set-url origin git@github.com:${GIT_REPO_OWNER}/${repoName}.git"
        sh "git checkout ${branchName}"
        sh("git push -u origin ${branchName}")
        reportList.add("git remote set-url origin git@github.com:${GIT_REPO_OWNER}/${repoName}.git")
        reportList.add("gitPushToBranch: git push -u origin ${branchName}")
    }
}
                        // master:      LATEST_FABRIC_VERSION   ->   stable
                        // stable:      LATEST_FABRIC_VERSION   ->   snapshot
void updateAndCommitBranch(fromBranchName, replaceTag, toBranchName) {
    reportList.add("updateAndCommitBranch: fromBranchName: ${fromBranchName}, replaceTag: {replaceTag}, toBranchName: {toBranchName}")
    checkoutAndThenPullIfRemoteExists(toBranchName)
    if (MERGE_FROM_MASTER == 'true') {
        echo "Now merging from ${fromBranchName}"
        reportList.add("updateAndCommitBranch: git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\"")
        sh "git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\""
        sh "git checkout ${fromBranchName} -- ."
        sh "git checkout ${MASTER_BRANCH} -- .env"
        
        envAppendVersionVars(toBranchName, FABRIC_VERSION)
        envAppendRepoVar(FABRIC_STARTER_REPOSITORY)
        }

    updateEnvFileWithVersions(FABRIC_VERSION, replaceTag, toBranchName)

    filesToReplace = ['docker-compose.yaml',
            'docker-compose-clean.yaml',
            'docker-compose-orderer.yaml',
            'docker-compose-listener.yaml',
            'docker-compose-deploy.yaml',
            'network-create-base.sh',
            'peer-start.sh',
            'raft-start-docker-machine.sh',
            'https/docker-compose-generate-tls-certs.yaml',
            'extra/docker-registry-local/start-docker-registry-local.sh',
            'deploy.sh',
            'build-fabric-tools-extended.sh',
            'docker-compose-open-net.yaml',
            'fabric-tools-extended/Dockerfile',
            'main_old.sh',
            'main.sh',
            'lib/backup-point.sh',
            'lib/restore-point.sh']
    updateComposeFilesFabricStarterVersionFromLatest(filesToReplace)
    updateComposeFilesWithVersions(filesToReplace, FABRIC_VERSION, replaceTag, toBranchName)

    commitBranch(toBranchName)

}

void updateAndCommitRESTBranch(fromBranchName, replaceTag, toBranchName) {
    checkoutAndThenPullIfRemoteExists(toBranchName)
    if (MERGE_FROM_MASTER == 'true') {
        sh "git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\""
        sh "git checkout ${fromBranchName} -- ."
        reportList.add("updateAndCommitRESTBranch: git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\"")
    }

    def filesToReplace=[
        'custom-admin.dockerfile',
        'Dockerfile'
    ]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
    updateComposeFilesFabricStarterVersionFromLatest(filesToReplace)
    
    //updateImagesReferencesVersion(filesToReplace, '', replaceTag, toBranchName)
    filesToReplace.each {updateImagesReferencesVersion(it, '', replaceTag, toBranchName)}
    
    
    //updateImagesReferencesVersion('custom-admin.dockerfile', '', replaceTag, toBranchName)
    
    commitBranch(toBranchName)
}

void checkoutAndThenPullIfRemoteExists(toBranchName) {
    if (remoteBranchExists(toBranchName)) {
        sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
            reportList.add("checkoutAndThenPullIfRemoteExists: git checkout ${toBranchName}")
            sh "git checkout ${toBranchName}"
            sh 'git pull'
        }
    } else {
        sh "git checkout -B ${toBranchName}"
    }
}

void envAppendVersionVars(currentBranchName, fabricVersion) {
    def fileContent = readFile '.env'
    writeFile file: '.env', text: "${fileContent}\nFABRIC_STARTER_VERSION=${currentBranchName}\nFABRIC_VERSION=${fabricVersion}"
    reportList.add("envAppendVersionVars: writeFile file: '.env', text: ${fileContent}\nFABRIC_STARTER_VERSION=${currentBranchName}\nFABRIC_VERSION=${fabricVersion}")
    sh 'git add .env'
}

void envAppendRepoVar(currentRepoName) {
    def fileContent = readFile '.env'
    writeFile file: '.env', text: "${fileContent}\nFABRIC_STARTER_REPOSITORY=${currentRepoName}"
    reportList.add("envAppendRepoVar: writeFile file: '.env', text: ${fileContent}\nFABRIC_STARTER_REPOSITORY=${currentRepoName}")
    sh 'git add .env'
}

// master:      LATEST_FABRIC_VERSION   ->    stable
// stable:      LATEST_FABRIC_VERSION   ->    snapshot
void updateEnvFileWithVersions(fabricVersion, replaceTag, currentBranch) {
    updateImagesReferencesVersion('.env', fabricVersion, replaceTag, currentBranch)
}

def updateComposeFilesWithVersions(filesToReplace,fabricVersion, replaceTag, currentBranch) { //mergeBranch -> currenBranch
    filesToReplace.each {updateImagesReferencesVersion(it, fabricVersion, replaceTag, currentBranch)}
}

def updateComposeFilesFabricStarterVersionFromLatest(filesToReplace) { //mergeBranch -> currenBranch
    filesToReplace.each {updateImagesReferencesVersionFromlatestToKnown(it)}
}

def updateImagesReferencesVersionFromlatestToKnown(fileToProcess) {
    fileContent = readFile fileToProcess
    reportList.add("updateImagesReferencesVersion: fileToProcess: ${fileToProcess}")
    def replaceTag='latest'
    def currentBranch=LATEST_FABRIC_VERSION

    replacementRules = [
        ("\${FABRIC_STARTER_VERSION:-" + "${replaceTag}" + '}')     :       ("\${FABRIC_STARTER_VERSION:-" + "${currentBranch}" + '}'),
        ("\${FABRIC_STARTER_VERSION:-"  +"\"${replaceTag}\"" + '}') :       ("\${FABRIC_STARTER_VERSION:-" + "\"${currentBranch}\""  + '}'),
        ('FABRIC_STARTER_VERSION=' + "${replaceTag}")               :       ('FABRIC_STARTER_VERSION=' + "${currentBranch}"),
        ('FABRIC_STARTER_VERSION=' + "\"${replaceTag}\"")           :       ('FABRIC_STARTER_VERSION=' + "\"${currentBranch}\""),
        ('FABRIC_STARTER_VERSION:=' + "${replaceTag}")              :       ('FABRIC_STARTER_VERSION:=' + "${currentBranch}"),
        ('FABRIC_STARTER_VERSION:=' + "\"${replaceTag}\"")          :       ('FABRIC_STARTER_VERSION:='  + "\"${currentBranch}\""),
        ("\\{FABRIC_STARTER_REPOSITORY:\\-[a-z]*}")                 :       ("{FABRIC_STARTER_REPOSITORY:-$FABRIC_STARTER_REPOSITORY}")
    ]

    replacementRules.keySet().each {
            fileContent = fileContent.replace(it,replacementRules.get(it))
    }
    writeFile file: fileToProcess, text: fileContent
    echo "Content for ${fileToProcess}: ${fileContent}"
    sh "git add ${fileToProcess}"
}



def updateImagesReferencesVersion(fileToProcess, fabricVersion, replaceTag, currentBranch) {
    fileContent = readFile fileToProcess
    reportList.add("updateImagesReferencesVersion: fileToProcess: ${fileToProcess}, fabricVersion: ${fabricVersion}, replaceTag: ${replaceTag} currentBranch: ${currentBranch}")
    replacementRules = [
        ("\${FABRIC_VERSION:-" + "${replaceTag}" + '}')             :       ("\${FABRIC_VERSION:-" + "${fabricVersion}" + '}'),
        ("\${FABRIC_VERSION:-" + "\"${replaceTag}\"" + '}')         :       ("\${FABRIC_VERSION:-" + "\"${fabricVersion}\"" + '}'),
        ('FABRIC_VERSION='  + "${replaceTag}")                      :       ('FABRIC_VERSION=' + "${fabricVersion}"),
        ('FABRIC_VERSION='  + "\"${replaceTag}\"")                  :       ('FABRIC_VERSION=' + "\"${fabricVersion}\""),
        ('FABRIC_VERSION:=' + "${replaceTag}")                      :       ('FABRIC_VERSION:=' + "${fabricVersion}"),
        ('FABRIC_VERSION:=' + "\"${replaceTag}\"")                  :       ('FABRIC_VERSION:=' + "\"${fabricVersion}\""),
        ("\${FABRIC_STARTER_VERSION:-" + "${replaceTag}" + '}')     :       ("\${FABRIC_STARTER_VERSION:-" + "${currentBranch}" + '}'),
        ("\${FABRIC_STARTER_VERSION:-"  +"\"${replaceTag}\"" + '}') :       ("\${FABRIC_STARTER_VERSION:-" + "\"${currentBranch}\""  + '}'),
        ('FABRIC_STARTER_VERSION=' + "${replaceTag}")               :       ('FABRIC_STARTER_VERSION=' + "${currentBranch}"),
        ('FABRIC_STARTER_VERSION=' + "\"${replaceTag}\"")           :       ('FABRIC_STARTER_VERSION=' + "\"${currentBranch}\""),
        ('FABRIC_STARTER_VERSION:=' + "${replaceTag}")              :       ('FABRIC_STARTER_VERSION:=' + "${currentBranch}"),
        ('FABRIC_STARTER_VERSION:=' + "\"${replaceTag}\"")          :       ('FABRIC_STARTER_VERSION:='  + "\"${currentBranch}\""),
        ("\\{FABRIC_STARTER_REPOSITORY:\\-[a-z]*}")                 :       ("{FABRIC_STARTER_REPOSITORY:-$FABRIC_STARTER_REPOSITORY}")
    ]

    replacementRules.keySet().each {
            fileContent = fileContent.replace(it,replacementRules.get(it))
    }

    writeFile file: fileToProcess, text: fileContent

    echo "Content for ${fileToProcess}: ${fileContent}"

    sh "git add ${fileToProcess}"
}

def remoteBranchExists(branchName) {
    def checkRemoteBranch = sh(script: "git branch --list -r origin/${branchName} | wc -l", returnStdout: true).toString().trim()
    def whetherExists = checkRemoteBranch.isInteger() ? checkRemoteBranch.toInteger() : 0
    return (whetherExists > 0)
}
