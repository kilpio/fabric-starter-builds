/* groovylint-disable LineLength */
CRED = '\033[1;31m'
CGREEN = '\033[1;32m'
CYELLOW = '\033[1;33m'
CBLUE = '\033[1;34m'
CMAGENTA = '\033[1;35m'
CCYAN = '\033[1;36m'
CWHITE = '\033[1;37m'
CFRAMED = '\033[51m'
CNOTFRAMED = '\033[54m'
CUNDERLINED = '\033[4m'
CNOTUNDERLINED = '\033[24m'
CNORMAL = '\033[0m'
// https://en.wikipedia.org/wiki/ANSI_escape_code

STABLE_BRANCH_NAME='stable'
OLD_LATEST_FS_VERSION_NAME='latest'
FABRIC_TOOLS_NAME = 'fabric-tools'
FABRIC_TOOLS_EXTENDED_NAME = 'fabric-tools-extended'

DBG_STDOUTPUT = '2>&1 1>/dev/null'
BE_VERBOSE = false
if (DEBUG == 'true') {BE_VERBOSE = true}
if (BE_VERBOSE) { DBG_STDOUTPUT = '' }

reportList = ["\n${CRED}======== MAIN OPERATIONS OF THE PIPELINE ========${CNORMAL}\n"]

filesToReplaceForFabricStarter = ['docker-compose.yaml',
                        'docker-compose-clean.yaml',
                        'docker-compose-orderer.yaml',
                        'docker-compose-listener.yaml',
                        'docker-compose-deploy.yaml',
                        'network-create-base.sh',
                        'peer-start.sh',
                        'raft-start-docker-machine.sh',
                        'https/docker-compose-generate-tls-certs.yaml',
                        'extra/docker-registry-local/start-docker-registry-local.sh',
                        'deploy.sh',
                        'build-fabric-tools-extended.sh',
                        'docker-compose-open-net.yaml',
                        'fabric-tools-extended/Dockerfile',
                        'main_old.sh',
                        'main.sh',
                        'lib/backup-point.sh',
                        'lib/restore-point.sh'
                        ]

filesToReplaceForFabricStarterRest = [
'custom-admin.dockerfile',
'Dockerfile'
]

node {
        ansiColor('xterm') {
            wrappedStage('Fabric-Starter-snapshot',,'START THE JOB') {
            def newFabricStarterTag

            wrappedStage('Delete-previous-results', CRED, "Pruning all previous job images") {
                    int previousJobNo = BUILD_NUMBER as Integer
                    previousJobNo -= 1
                    previousBuildNumber = previousJobNo.toString()
                    echo "Pruning results of build no. ${previousBuildNumber} of ${JOB_NAME}"
                    def debug = " | grep 'Total reclaimed space'"
                    sh "docker image prune --all --force --filter \"label=jenkins_job_name=${JOB_NAME}\" --filter \"label=jenkins_job_build=${previousBuildNumber}\" ${debug}"
                }

            wrappedStage('Cleaning-job-workspace', CMAGENTA, "Cleaning job workspace: ${WORKSPACE}") {
                    def isWorkspaceNotOK = !(WORKSPACE?.trim())
                    if (isWorkspaceNotOK) {
                        echo 'Failure: WORKSPACE variable is undefined!'
                        currentBuild.result = 'FAILURE'
                        return
                    } else {
                            dir(WORKSPACE) {
                                deleteDir()
                                sh 'ls -ld $(find .)'
                            }
                    }
                }

    //? ======================================== BUILDING FABRIC-TOOLS-EXTENDED IMAGES =========================

            wrappedStage('Fabric-Starter-git-checkout', CBLUE, "Pull fabric-starter from ${GIT_REPO_OWNER}/fabric-starter") {
                        echo "Debug output: ${DBG_STDOUTPUT}"
                        checkoutFromGithubToSubfolder('fabric-starter', "${BUILD_BRANCH}")
                        dir ('fabric-starter') {
                                oldFabricStarterVersion = getFabricStarterVersionFromEnv()
                                oldFabricVersion = getFabricVersionFromEnv()
                                reportList.add("oldFabricStarterVersion: ${oldFabricStarterVersion}, oldFabricVersion: ${oldFabricVersion}")
                                echo "oldFabricStarterVersion: ${oldFabricStarterVersion}, oldFabricVersion: ${oldFabricVersion}"
                                }
                }

            wrappedStage('Evaluate-next-snapshot-git-tag', CGREEN, 'Get next snapshot tag', './fabric-starter') {
                        newFabricStarterTag = evaluateNextSnapshotGitTag('Fabric-starter')
                }

            wrappedStage('Fabric-Starter-merge-master-to-stable', CMAGENTA, "Merge from ${MASTER_BRANCH} and commit ${STABLE_BRANCH_NAME}", './fabric-starter') { //BUILD_NUMBER

                        gitSetUser(GIT_REPO_OWNER)

                        updateAndCommitBranch("origin/$MASTER_BRANCH", PREVIOUS_FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}",filesToReplaceForFabricStarter)
                }

            wrappedStage('Fabric-Starter-merge-stable-to-snapshot', CCYAN, "Merge from ${BUILD_BRANCH} and commit ${newFabricStarterTag}", './fabric-starter' ) {
                if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                        updateAndCommitBranch(BUILD_BRANCH, BUILD_BRANCH, newFabricStarterTag, filesToReplaceForFabricStarter)
                    } else { reportList.add("Fabric-Starter-Merge-stable-to-snapshot: Skip creating snapshot for ${BUILD_BRANCH }") }
                }

wrappedStage('Fabric-Tools-Extended-build-extended-images', CYELLOW, "Build fabric-tools-extended images for BUILD_BRANCH and snapshot", './fabric-starter') {
                    buildDockerImage(
                                        FABRIC_TOOLS_EXTENDED_NAME,
                                        FABRIC_VERSION,
                                        MASTER_BRANCH,
                                        "--no-cache --build-arg FABRIC_VERSION=${FABRIC_VERSION} -f fabric-tools-extended/Dockerfile . ${DBG_STDOUTPUT}"
                                    )
                    tagDockerImage(FABRIC_TOOLS_EXTENDED_NAME, FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}")    // e.g. stable
                    if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}")  {
                            tagDockerImage(FABRIC_TOOLS_EXTENDED_NAME, FABRIC_VERSION, newFabricStarterTag) //e.g. snapshot
                                                                    }
                }

            //? ======================================== BUILDING FABRIC-STARTER-REST IMAGES =========================
            wrappedStage('Farbric-Starter-Rest-checkout', CCYAN, 'Pull fabric-starter-rest and checkout to the master branch') {
                            checkoutFromGithubToSubfolder('fabric-starter-rest')
                }

            wrappedStage('Farbric-Starter-Rest-update-and-commit', CCYAN, 'Update and commit fabric-starter-rest branches', './fabric-starter-rest') {
                    gitSetUser(GIT_REPO_OWNER)
                    updateAndCommitBranch(MASTER_BRANCH, PREVIOUS_FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}", filesToReplaceForFabricStarterRest)
                }

            wrappedStage('Farbric-Starter-Rest-copy-stable-to-snapshot', CYELLOW, 'Take updates from master (pretend as from stable) to snapshot, commit snapshot ', './fabric-starter-rest') {
                    if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                                            updateAndCommitBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", "${FABRIC_VERSION}-${BUILD_BRANCH}", newFabricStarterTag, filesToReplaceForFabricStarterRest)
                    } else {
                            reportList.add("Farbric-starter-REST-copy-stable-to-snapshot: Skip creating snapshot for ${BUILD_BRANCH }")
                    }
                }

            wrappedStage('Fabric-Starter-Rest-build-docker-images', CGREEN, "Build snapshot, stable fabric-starter-rest images", './fabric-starter-rest') {
                if (SKIP_FS_REST_BUILD == 'false') {
                    buildDockerImage(
                                        'fabric-starter-rest',
                                        FABRIC_VERSION,
                                        MASTER_BRANCH,
                                        "--build-arg FABRIC_STARTER_REPOSITORY=${FABRIC_STARTER_REPOSITORY} --no-cache -f Dockerfile . ${DBG_STDOUTPUT}"
                                    )
                    if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                                tagDockerImage('fabric-starter-rest', FABRIC_VERSION, newFabricStarterTag)
                        }
                    tagDockerImage('fabric-starter-rest', FABRIC_VERSION, "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    }
                }

//? ========================================== DOCKER PUSH==============================================

            wrappedStage('Fabric-Starter-Rest-push-snapshot-docker-images', CBLUE, "Push fabric-starter-rest ${newFabricStarterTag} image to Dockerhub") {
                    if (SKIP_DOCKER_PUSH == 'false') {
                        if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                                                                pushDockerImage('fabric-starter-rest', newFabricStarterTag)
                                    // pushDockerImage('fabric-starter-rest', "${FABRIC_VERSION}")
                            }
                        pushDockerImage('fabric-starter-rest', "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    }
            }

            wrappedStage('Fabric-Starter-push-docker-images', CCYAN, "Push fabric-starter ${newFabricStarterTag} image to Dockerhub") {
                if ((SKIP_DOCKER_PUSH == 'false') || (SKIP_FS_REST_BUILD == 'false') ) {
                    if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                                    pushDockerImage('fabric-tools-extended', newFabricStarterTag)
                                    // pushDockerImage('fabric-tools-extended', "${FABRIC_VERSION}")
                        }
                    pushDockerImage('fabric-tools-extended', "${FABRIC_VERSION}-${BUILD_BRANCH}")
                    }
                }

            //? ==================================== GIT PUSH==========================================

            wrappedStage('Fabric-Starter-Rest-git-push-snapshot', CBLUE, "push fabric-starter-rest ${newFabricStarterTag} branch to github", './fabric-starter-rest') {
                    if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                            gitPushToBranch(newFabricStarterTag, 'fabric-starter-rest')
                            // gitPushToBranch(FABRIC_VERSION, 'fabric-starter-rest')
                    }
                }

            wrappedStage('Fabric-Starter-Rest-git-push-stable', CGREEN, "push fabric-starter-rest ${FABRIC_VERSION}-${BUILD_BRANCH} to github", './fabric-starter-rest') {
                    gitPushToBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", 'fabric-starter-rest')
                }

            wrappedStage ('Fabric-Starter-git-push-snapshot', CMAGENTA, "push fabric-starter ${newFabricStarterTag} branch to github", './fabric-starter') {
                if (BUILD_BRANCH == "${STABLE_BRANCH_NAME}") {
                            gitPushToBranch(newFabricStarterTag, 'fabric-starter')
                            // gitPushToBranch(FABRIC_VERSION, 'fabric-starter')
                    }
                }

            wrappedStage ('Fabric-Starter-git-push-stable', CBLUE, "push fabric-starter ${FABRIC_VERSION}-${BUILD_BRANCH} branch to github", './fabric-starter') {
                    gitPushToBranch("${FABRIC_VERSION}-${BUILD_BRANCH}", 'fabric-starter')
                }

            //? ====================================== REPORT =====================================
            wrappedStage('Print-report',CGREEN, 'print report') {
                if (BE_VERBOSE) {
                    def report
                    reportList.eachWithIndex {
                        if (it != null) {
                            line = it.replaceFirst('^', "${CCYAN}")
                            line = line.replaceFirst(': ', ":${CGREEN} ")
                            line = line.replaceFirst('STAGE:', "${CRED}-- STAGE:${CBLUE}")
                            line = line.replaceFirst('$', "${CNORMAL}")
                            report += line + '\n'
                        }
                    }
                    echo report
                }
            }
        } // wrappedStage 'Fabric-Starter-snapshot'
    } //AnsiColor
}//node

//! ======================================== FUNCTIONS ===========================================

def checkoutFromGithubToSubfolder(repositoryName, def branch = 'master') {
    echo 'If login fails here with right credentials,please add github.com to known hosts for jenkins user (ssh-keyscan -H github.com >> .ssh/known_hosts)'
    sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
        //sh 'pwd'
        //sh 'ls -la'
        sh "git clone git@github.com:${GIT_REPO_OWNER}/${repositoryName}.git"
        dir(repositoryName) {
            //sh "git checkout ${MASTER_BRANCH}"
            sh "git checkout $branch"
            sh 'git pull'
        }
        reportList.add("checkoutFromGithubToSubfolder: git clone git@github.com:${GIT_REPO_OWNER}/${repositoryName}.git; git checkout ${MASTER_BRANCH}; git pull")
    }
}

//Temporaly rename this function as evaluateNextSnapshotGitTag to generate snapshot in new format '1.4.4-snapshot-0.12'
// def evaluateNextSnapshotGitTagTransition(repositoryTitle) {
//     echo "Evaluate next snapshot name for ${repositoryTitle}"
//     def lastSnapshot = sh(returnStdout: true, script: "git branch -r --list 'origin/snapshot-*' --sort=-committerdate | sort --version-sort --reverse | head -1").trim()
//     echo "Current latest snapshot: ${lastSnapshot}"
//     def (branchPrefix,fabricVersion,version) = lastSnapshot.tokenize('-')
//     def (majorVer,minorVer) = fabricVersion.tokenize('.')
//     int minorVersion = (minorVer as int)
//     def cleanBranchPrefix = branchPrefix.split('/')[1]
//     def newGitTag = "${FABRIC_VERSION}-${cleanBranchPrefix}-${majorVer}.${minorVersion + 1}"
//     echo "New Tag for ${repositoryTitle}: ${newGitTag}"
//     reportList.add("evaluateNextSnapshotGitTag: New Tag for ${repositoryTitle}: ${newGitTag}")
//     newGitTag
// }

def evaluateNextSnapshotGitTag(repositoryTitle) {
    echo "Evaluate next snapshot name for ${repositoryTitle}"
    def lastSnapshot = sh(returnStdout: true, script: "git branch -r --list 'origin/*-snapshot-*' --sort=-committerdate | sort --version-sort --reverse -t '-' -k 2 | head -1").trim()
    echo "Current latest snapshot: ${lastSnapshot}"
    def (fabricVersion,branchPrefix,version) = lastSnapshot.tokenize('-')
    def cleanFabricVersion = fabricVersion.split('/')[1]
    def (majorVer,minorVer) = version.tokenize('.')
    int minorVersion = (minorVer as int)
    def newGitTag = "${FABRIC_VERSION}-${branchPrefix}-${majorVer}.${minorVersion + 1}"
    echo "New Tag for ${repositoryTitle}: ${newGitTag}"
    reportList.add("evaluateNextSnapshotGitTag: New Tag for ${repositoryTitle}: ${newGitTag}")
    newGitTag
    }

def gitSetUser(gitRepoOwner) {
    sh "git config user.email ${gitRepoOwner}@jenkins"
    sh "git config user.name  ${gitRepoOwner}"
    }


void buildDockerImage(imageName, tag, branchToBuildImageFrom, def args = '') {
    CUNDERLINED = '\033[4m'
    CNOTUNDERLINED = '\033[24m'
    CRED = '\033[1;31m'

    echo "${CUNDERLINED}Building ${imageName} with tag ${tag} from branch ${branchToBuildImageFrom}${CNOTUNDERLINED}"
    if (BE_VERBOSE) { sh 'docker image ls' }

    sh "git checkout ${branchToBuildImageFrom}"
    if (!args?.trim()) {
        args = '-f Dockerfile .'
    }

    arguments = "-t ${DOCKER_REPO}/${imageName}:${tag} --label \"jenkins_job_build=${BUILD_NUMBER}\" --label \"jenkins_job_name=${JOB_NAME}\" ${args}"
    echo "docker build args: $arguments"

    sh(returnStdout:BE_VERBOSE, script: "docker image build ${arguments} ${DBG_STDOUTPUT}")
    reportList.add("buildDockerImage: docker image build ${arguments}")
    if (BE_VERBOSE) {
            sh 'docker image ls'
    }
}

void tagDockerImage(imageName, tag, newTag) {
    sh "docker tag ${DOCKER_REPO}/${imageName}:${tag} ${DOCKER_REPO}/${imageName}:${newTag}"
    reportList.add("tagDockerImage: docker tag ${DOCKER_REPO}/${imageName}:${tag} ${DOCKER_REPO}/${imageName}:${newTag}")
}

void pushDockerImage(imageName, tag) {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '${DOCKER_CREDENTIALS_ID}',
usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD']]) {
        sh 'docker logout'
        sh "docker login -u $USERNAME -p $PASSWORD ${DOCKER_REGISTRY}"
        sh "docker push ${USERNAME}/${imageName}:${tag} ${DBG_STDOUTPUT}"
        sh 'docker logout'
        reportList.add("pushDockerImage: docker push ${USERNAME}/${imageName}:${tag}")
                }
    }

void commitBranch(branchName) {
    echo "void commitBranch ${branchName}"
    sh "git checkout ${branchName}"
    sh "git commit -m ${branchName} || true"
    reportList.add("commitBranch: git commit -m ${branchName}")
    }

void gitPushToBranch(branchName, repoName) {
    echo GITHUB_SSH_CREDENTIALS_ID
    sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
        sh "git config user.name ${GIT_REPO_OWNER}"
        sh "git remote set-url origin git@github.com:${GIT_REPO_OWNER}/${repoName}.git"
        sh "git checkout ${branchName}"
        sh("git push -u origin ${branchName}")
        reportList.add("git remote set-url origin git@github.com:${GIT_REPO_OWNER}/${repoName}.git")
        reportList.add("gitPushToBranch: git push -u origin ${branchName}")
        }
    }
// master:      PREVIOUS_FABRIC_VERSION   ->   stable
// stable:      PREVIOUS_FABRIC_VERSION   ->   snapshot
void updateAndCommitBranch(fromBranchName, replaceTag, toBranchName, filesToReplace) {
    reportList.add("updateAndCommitBranch: fromBranchName: ${fromBranchName},replaceTag: ${replaceTag}, toBranchName: ${toBranchName}")

    checkoutAndThenPullIfRemoteExists(toBranchName)

    if (MERGE_FROM_MASTER == 'true') {
        echo "Now merging from ${fromBranchName}"
        reportList.add("updateAndCommitBranch: git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\"")
        sh "git merge --strategy-option=theirs ${fromBranchName} -m \"merge ${fromBranchName} into ${toBranchName}\""
        sh "git checkout ${fromBranchName} -- ."

    if (fileExists('./.env') == 'true') {
        echo "Modifing ./env file"
        sh "git checkout origin/${MASTER_BRANCH} -- .env"
        envAppendVersionVars(toBranchName, FABRIC_VERSION)
        envAppendRepoVar(FABRIC_STARTER_REPOSITORY)
                }
            }

        if (fileExists('./.env') == 'true') {
            echo "Modifing ./env file"
            updateEnvFileWithVersions(FABRIC_VERSION, replaceTag, toBranchName)
            }
        //get rid of 'latest' FABRIC_STARTR_VERSION in compose yamsl
        updateComposeFilesFabricStarterVersionFromLatest(filesToReplace)
        echo "updateComposeFilesWithVersions(filesToReplace: ${filesToReplace}, FABRIC_VERSION: ${FABRIC_VERSION}, replaceTag: ${replaceTag}, toBranchName: ${toBranchName})"

        if (fromBranchName == STABLE_BRANCH_NAME) {
            updateComposeFilesWithVersions(filesToReplace, FABRIC_VERSION, oldFabricVersion, toBranchName)
            updateComposeFilesWithVersions(filesToReplace, FABRIC_VERSION, oldFabricStarterVersion, toBranchName)
        } else {

        updateComposeFilesWithVersions(filesToReplace, FABRIC_VERSION, replaceTag, toBranchName)
                }
        commitBranch(toBranchName)
    }

void checkoutAndThenPullIfRemoteExists(toBranchName) {
    if (remoteBranchExists(toBranchName)) {
        sshagent(credentials: ['${GITHUB_SSH_CREDENTIALS_ID}']) {
            reportList.add("checkoutAndThenPullIfRemoteExists: git checkout ${toBranchName}")
            sh "git checkout ${toBranchName}"
            sh 'git pull'
            }
        } else {
            sh "git checkout -B ${toBranchName}"
        }
    }

void envAppendVersionVars(currentBranchName, fabricVersion) {
        def fileContent = readFile '.env'

        writeFile file: '.env', text: "${fileContent}\nFABRIC_STARTER_VERSION=${currentBranchName}\nFABRIC_VERSION=${fabricVersion}"
        reportList.add("envAppendVersionVars: writeFile file: '.env',text: ${fileContent}\nFABRIC_STARTER_VERSION=${currentBranchName}\nFABRIC_VERSION=${fabricVersion}")
        sh 'git add .env'
    }

void envAppendRepoVar(currentRepoName) {
        def fileContent = readFile '.env'

        writeFile file: '.env', text: "${fileContent}\nFABRIC_STARTER_REPOSITORY=${currentRepoName}"
        reportList.add("envAppendRepoVar: writeFile file: '.env',text: ${fileContent}\nFABRIC_STARTER_REPOSITORY=${currentRepoName}")
        sh 'git add .env'
    }

                            // master:      PREVIOUS_FABRIC_VERSION   ->    stable
                            // stable:      PREVIOUS_FABRIC_VERSION   ->    snapshot
void updateEnvFileWithVersions(fabricVersion, replaceTag, currentBranch) {
        updateImagesReferencesVersion('.env', fabricVersion, replaceTag, currentBranch)
    }

def updateComposeFilesWithVersions(filesToReplace, fabricVersion, replaceTag, currentBranch) { //mergeBranch -> currentBranch
        filesToReplace.each { updateImagesReferencesVersion(it, fabricVersion, replaceTag, currentBranch) }
    }

def updateComposeFilesFabricStarterVersionFromLatest(filesToReplace) { //mergeBranch -> currentBranch
        filesToReplace.each { updateImagesReferencesVersionFromlatestToKnown(it) }
    }

def updateImagesReferencesVersionFromlatestToKnown(fileToProcess) {
        fileContent = readFile fileToProcess
        reportList.add("updateImagesReferencesVersionFromlatestToKnown: fileToProcess: ${fileToProcess}")

        def replaceTag = OLD_LATEST_FS_VERSION_NAME
        def currentBranch = PREVIOUS_FABRIC_VERSION

        replacementRules = [
                            ("\${FABRIC_STARTER_VERSION:-" + "${replaceTag}" + '}')     :       ("\${FABRIC_STARTER_VERSION:-" + "${currentBranch}" + '}'),
                            ("\${FABRIC_STARTER_VERSION:-" + "\"${replaceTag}\"" + '}') :       ("\${FABRIC_STARTER_VERSION:-" + "\"${currentBranch}\"" + '}'),
                            ('FABRIC_STARTER_VERSION=' + "${replaceTag}")               :       ('FABRIC_STARTER_VERSION=' + "${currentBranch}"),
                            ('FABRIC_STARTER_VERSION=' + "\"${replaceTag}\"")           :       ('FABRIC_STARTER_VERSION=' + "\"${currentBranch}\""),
                            ('FABRIC_STARTER_VERSION:=' + "${replaceTag}")              :       ('FABRIC_STARTER_VERSION:=' + "${currentBranch}"),
                            ('FABRIC_STARTER_VERSION:=' + "\"${replaceTag}\"")          :       ('FABRIC_STARTER_VERSION:='  + "\"${currentBranch}\""),
                            ("\\{FABRIC_STARTER_REPOSITORY:\\-[a-z]*}")                 :       ("{FABRIC_STARTER_REPOSITORY:-$FABRIC_STARTER_REPOSITORY}")
                            ]

        replacementRules.keySet().each {
            fileContent = fileContent.replace(it, replacementRules.get(it))
            }

        writeFile file: fileToProcess, text: fileContent
        if (BE_VERBOSE) {echo "Content for ${fileToProcess}: ${fileContent}"}
        sh "git add ${fileToProcess}"
    }

def updateImagesReferencesVersion(fileToProcess, fabricVersion, replaceTag, currentBranch) {
        fileContent = readFile fileToProcess
        reportList.add("updateImagesReferencesVersion: fileToProcess: ${fileToProcess},fabricVersion: ${fabricVersion},replaceTag: ${replaceTag} currentBranch: ${currentBranch}")
        replacementRules = [
                            ("\${FABRIC_VERSION:-" + "${replaceTag}" + '}')             :       ("\${FABRIC_VERSION:-" + "${fabricVersion}" + '}'),
                            ("\${FABRIC_VERSION:-" + "\"${replaceTag}\"" + '}')         :       ("\${FABRIC_VERSION:-" + "\"${fabricVersion}\"" + '}'),
                            ('FABRIC_VERSION='  + "${replaceTag}")                      :       ('FABRIC_VERSION=' + "${fabricVersion}"),
                            ('FABRIC_VERSION='  + "\"${replaceTag}\"")                  :       ('FABRIC_VERSION=' + "\"${fabricVersion}\""),
                            ('FABRIC_VERSION:=' + "${replaceTag}")                      :       ('FABRIC_VERSION:=' + "${fabricVersion}"),
                            ('FABRIC_VERSION:=' + "\"${replaceTag}\"")                  :       ('FABRIC_VERSION:=' + "\"${fabricVersion}\""),
                            ("\${FABRIC_STARTER_VERSION:-" + "${replaceTag}" + '}')     :       ("\${FABRIC_STARTER_VERSION:-" + "${currentBranch}" + '}'),
                            ("\${FABRIC_STARTER_VERSION:-" + "\"${replaceTag}\"" + '}') :       ("\${FABRIC_STARTER_VERSION:-" + "\"${currentBranch}\"" + '}'),
                            ('FABRIC_STARTER_VERSION=' + "${replaceTag}")               :       ('FABRIC_STARTER_VERSION=' + "${currentBranch}"),
                            ('FABRIC_STARTER_VERSION=' + "\"${replaceTag}\"")           :       ('FABRIC_STARTER_VERSION=' + "\"${currentBranch}\""),
                            ('FABRIC_STARTER_VERSION:=' + "${replaceTag}")              :       ('FABRIC_STARTER_VERSION:=' + "${currentBranch}"),
                            ('FABRIC_STARTER_VERSION:=' + "\"${replaceTag}\"")          :       ('FABRIC_STARTER_VERSION:='  + "\"${currentBranch}\""),
                            ("\\{FABRIC_STARTER_REPOSITORY:\\-[a-z]*}")                 :       ("{FABRIC_STARTER_REPOSITORY:-$FABRIC_STARTER_REPOSITORY}")
                            ]

        replacementRules.keySet().each {
            fileContent = fileContent.replace(it, replacementRules.get(it))
        }

        writeFile file: fileToProcess, text: fileContent

        if (BE_VERBOSE) { echo "Content for ${fileToProcess}: ${fileContent}" }

        sh "git add ${fileToProcess}"
    }

def remoteBranchExists(branchName) {
        def checkRemoteBranch = sh(script: "git branch --list -r origin/${branchName} | wc -l", returnStdout: true).toString().trim()
        def whetherExists = checkRemoteBranch.isInteger() ? checkRemoteBranch.toInteger() : 0
        return (whetherExists > 0)
    }

def fileExists(fileName) {
        sh(returnStdout: true, script: "test -f ${fileName} && echo true || echo false").toString().trim()
    }

def getFabricVersionFromEnv()  {

        if (fileExists('./.env') == 'true') {
            def result = sh(returnStdout: true, script: "cat './.env' | grep -E \"^FABRIC_VERSION=\" | cut -d '=' -f 2").toString().trim()
            echo "getFabricVersionFromEnv: ${result}"
            return "${result}"
        }
    }

def getFabricStarterVersionFromEnv() {
        if (fileExists('./.env') == 'true') {
            def result = sh(returnStdout: true, script:  "cat './.env' | grep -E \"^FABRIC_STARTER_VERSION=\" | cut -d '=' -f 2").toString().trim()
            echo "getFabricStarterVersionFromEnv: ${result}"
            return "${result}"
        }
    }


def wrappedStage(name, def color=CNORMAL, def description=null, def currentDir=".", Closure closure) {
        stage(name) {
            dir(currentDir) {
                if (description) { echo "${CRED}${CUNDERLINED}${description}${CNOTUNDERLINED}" }

                echo color
                reportList.add("STAGE: ${STAGE_NAME}")
                def result = closure.call()
                echo CNORMAL
                return result
            }
        }
    }
